"use strict";
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
const { Decimal, objectEnumValues, makeStrictEnum, Public, getRuntime, skip } = require('./runtime/index-browser.js');
const Prisma = {};
exports.Prisma = Prisma;
exports.$Enums = {};
/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
    client: "6.13.0",
    engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
};
Prisma.PrismaClientKnownRequestError = () => {
    const runtimeName = getRuntime().prettyName;
    throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientUnknownRequestError = () => {
    const runtimeName = getRuntime().prettyName;
    throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientRustPanicError = () => {
    const runtimeName = getRuntime().prettyName;
    throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientInitializationError = () => {
    const runtimeName = getRuntime().prettyName;
    throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientValidationError = () => {
    const runtimeName = getRuntime().prettyName;
    throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.Decimal = Decimal;
/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
    const runtimeName = getRuntime().prettyName;
    throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.empty = () => {
    const runtimeName = getRuntime().prettyName;
    throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.join = () => {
    const runtimeName = getRuntime().prettyName;
    throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.raw = () => {
    const runtimeName = getRuntime().prettyName;
    throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.validator = Public.validator;
/**
* Extensions
*/
Prisma.getExtensionContext = () => {
    const runtimeName = getRuntime().prettyName;
    throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.defineExtension = () => {
    const runtimeName = getRuntime().prettyName;
    throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;
Prisma.NullTypes = {
    DbNull: objectEnumValues.classes.DbNull,
    JsonNull: objectEnumValues.classes.JsonNull,
    AnyNull: objectEnumValues.classes.AnyNull
};
/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
});
exports.Prisma.UserScalarFieldEnum = {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    firstName: 'firstName',
    lastName: 'lastName',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.ProspectiveStudentScalarFieldEnum = {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    dateOfBirth: 'dateOfBirth',
    gender: 'gender',
    ethnicity: 'ethnicity',
    email: 'email',
    phone: 'phone',
    address: 'address',
    city: 'city',
    state: 'state',
    zipCode: 'zipCode',
    guardianName: 'guardianName',
    guardianEmail: 'guardianEmail',
    guardianPhone: 'guardianPhone',
    guardianRelation: 'guardianRelation',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.ApplicationScalarFieldEnum = {
    id: 'id',
    prospectiveStudentId: 'prospectiveStudentId',
    status: 'status',
    applicationDate: 'applicationDate',
    documents: 'documents',
    notes: 'notes',
    reviewedBy: 'reviewedBy',
    reviewedAt: 'reviewedAt',
    acceptanceEmailSent: 'acceptanceEmailSent',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.StudentScalarFieldEnum = {
    id: 'id',
    userId: 'userId',
    studentUniqueId: 'studentUniqueId',
    firstName: 'firstName',
    lastName: 'lastName',
    middleName: 'middleName',
    birthDate: 'birthDate',
    gender: 'gender',
    ethnicity: 'ethnicity',
    gradeLevel: 'gradeLevel',
    enrollmentDate: 'enrollmentDate',
    enrollmentStatus: 'enrollmentStatus',
    email: 'email',
    phone: 'phone',
    address: 'address',
    city: 'city',
    state: 'state',
    zipCode: 'zipCode',
    emergencyContactName: 'emergencyContactName',
    emergencyContactPhone: 'emergencyContactPhone',
    emergencyContactRelation: 'emergencyContactRelation',
    medicalConditions: 'medicalConditions',
    medications: 'medications',
    allergies: 'allergies',
    emergencyMedicalInstructions: 'emergencyMedicalInstructions',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.ParentScalarFieldEnum = {
    id: 'id',
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    address: 'address',
    city: 'city',
    state: 'state',
    zipCode: 'zipCode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.StudentParentScalarFieldEnum = {
    id: 'id',
    studentId: 'studentId',
    parentId: 'parentId',
    relationship: 'relationship',
    isPrimary: 'isPrimary',
    hasLegalCustody: 'hasLegalCustody',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.StaffScalarFieldEnum = {
    id: 'id',
    userId: 'userId',
    staffUniqueId: 'staffUniqueId',
    firstName: 'firstName',
    lastName: 'lastName',
    middleName: 'middleName',
    email: 'email',
    phone: 'phone',
    position: 'position',
    department: 'department',
    hireDate: 'hireDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.SchoolScalarFieldEnum = {
    id: 'id',
    schoolId: 'schoolId',
    name: 'name',
    type: 'type',
    address: 'address',
    city: 'city',
    state: 'state',
    zipCode: 'zipCode',
    phone: 'phone',
    principal: 'principal',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.SessionScalarFieldEnum = {
    id: 'id',
    schoolId: 'schoolId',
    name: 'name',
    beginDate: 'beginDate',
    endDate: 'endDate',
    totalInstructionalDays: 'totalInstructionalDays',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.GradingPeriodScalarFieldEnum = {
    id: 'id',
    sessionId: 'sessionId',
    schoolId: 'schoolId',
    name: 'name',
    beginDate: 'beginDate',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.HomeroomScalarFieldEnum = {
    id: 'id',
    schoolId: 'schoolId',
    name: 'name',
    teacherId: 'teacherId',
    roomNumber: 'roomNumber',
    capacity: 'capacity',
    gradeLevel: 'gradeLevel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.CourseScalarFieldEnum = {
    id: 'id',
    schoolId: 'schoolId',
    courseCode: 'courseCode',
    name: 'name',
    description: 'description',
    credits: 'credits',
    department: 'department',
    gradeLevel: 'gradeLevel',
    prerequisites: 'prerequisites',
    capacity: 'capacity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.CourseSectionScalarFieldEnum = {
    id: 'id',
    courseId: 'courseId',
    schoolId: 'schoolId',
    sessionId: 'sessionId',
    sectionIdentifier: 'sectionIdentifier',
    teacherId: 'teacherId',
    roomNumber: 'roomNumber',
    period: 'period',
    time: 'time',
    days: 'days',
    maxStudents: 'maxStudents',
    currentEnrollment: 'currentEnrollment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.EnrollmentScalarFieldEnum = {
    id: 'id',
    studentId: 'studentId',
    courseSectionId: 'courseSectionId',
    homeroomId: 'homeroomId',
    enrollmentDate: 'enrollmentDate',
    exitDate: 'exitDate',
    status: 'status',
    grade: 'grade',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.AttendanceScalarFieldEnum = {
    id: 'id',
    studentId: 'studentId',
    courseSectionId: 'courseSectionId',
    date: 'date',
    attendanceCode: 'attendanceCode',
    minutes: 'minutes',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.AssignmentScalarFieldEnum = {
    id: 'id',
    courseSectionId: 'courseSectionId',
    title: 'title',
    description: 'description',
    type: 'type',
    dueDate: 'dueDate',
    maxPoints: 'maxPoints',
    weight: 'weight',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.GradeScalarFieldEnum = {
    id: 'id',
    studentId: 'studentId',
    courseSectionId: 'courseSectionId',
    assignmentId: 'assignmentId',
    gradingPeriodId: 'gradingPeriodId',
    gradeType: 'gradeType',
    numericGrade: 'numericGrade',
    letterGrade: 'letterGrade',
    points: 'points',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.DisciplineIncidentScalarFieldEnum = {
    id: 'id',
    incidentIdentifier: 'incidentIdentifier',
    incidentDate: 'incidentDate',
    incidentTime: 'incidentTime',
    incidentLocation: 'incidentLocation',
    reporterName: 'reporterName',
    reporterDescription: 'reporterDescription',
    behaviorCode: 'behaviorCode',
    incidentDescription: 'incidentDescription',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.StudentDisciplineIncidentScalarFieldEnum = {
    id: 'id',
    studentId: 'studentId',
    incidentId: 'incidentId',
    studentRole: 'studentRole',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.DisciplineActionScalarFieldEnum = {
    id: 'id',
    incidentId: 'incidentId',
    actionType: 'actionType',
    actionDate: 'actionDate',
    duration: 'duration',
    description: 'description',
    assignedBy: 'assignedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
};
exports.Prisma.SortOrder = {
    asc: 'asc',
    desc: 'desc'
};
exports.Prisma.NullableJsonNullValueInput = {
    DbNull: Prisma.DbNull,
    JsonNull: Prisma.JsonNull
};
exports.Prisma.QueryMode = {
    default: 'default',
    insensitive: 'insensitive'
};
exports.Prisma.NullsOrder = {
    first: 'first',
    last: 'last'
};
exports.Prisma.JsonNullValueFilter = {
    DbNull: Prisma.DbNull,
    JsonNull: Prisma.JsonNull,
    AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
    ADMIN: 'ADMIN',
    TEACHER: 'TEACHER',
    PARENT: 'PARENT',
    STUDENT: 'STUDENT'
};
exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
    APPLIED: 'APPLIED',
    ACCEPTED: 'ACCEPTED',
    REJECTED: 'REJECTED'
};
exports.Prisma.ModelName = {
    User: 'User',
    ProspectiveStudent: 'ProspectiveStudent',
    Application: 'Application',
    Student: 'Student',
    Parent: 'Parent',
    StudentParent: 'StudentParent',
    Staff: 'Staff',
    School: 'School',
    Session: 'Session',
    GradingPeriod: 'GradingPeriod',
    Homeroom: 'Homeroom',
    Course: 'Course',
    CourseSection: 'CourseSection',
    Enrollment: 'Enrollment',
    Attendance: 'Attendance',
    Assignment: 'Assignment',
    Grade: 'Grade',
    DisciplineIncident: 'DisciplineIncident',
    StudentDisciplineIncident: 'StudentDisciplineIncident',
    DisciplineAction: 'DisciplineAction'
};
/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
    constructor() {
        return new Proxy(this, {
            get(target, prop) {
                let message;
                const runtime = getRuntime();
                if (runtime.isEdge) {
                    message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
                }
                else {
                    message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).';
                }
                message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`;
                throw new Error(message);
            }
        });
    }
}
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
//# sourceMappingURL=index-browser.js.map