version: '3.8'

services:
  # Use the EXACT same configuration from your local docker-compose-sandbox-pgsql.yml
  # that was working earlier
  
  db-ods-sandbox:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 980jlej.23kd
      POSTGRES_DB: postgres
      TPDM_ENABLED: "true"
    volumes:
      - vol-db-ods:/var/lib/postgresql/data
    restart: always
    container_name: ed-fi-db-ods
    hostname: ed-fi-db-ods
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      start_period: "60s"
      retries: 3

  db-admin:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 980jlej.23kd
      POSTGRES_DB: postgres
    volumes:
      - vol-db-admin:/var/lib/postgresql/data
    restart: always
    container_name: ed-fi-db-admin
    hostname: ed-fi-db-admin
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      start_period: "60s"
      retries: 3

  # For now, let's just get the databases and a simple test running
  # We'll add the Ed-Fi API components once we figure out the correct images
  
  # SIS PostgreSQL Database
  sis-postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 980jlej.23kd
      POSTGRES_DB: sis_db
    volumes:
      - sis-postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d sis_db -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Simple nginx to verify deployment is working
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./index.html:/usr/share/nginx/html/index.html:ro
    restart: always

volumes:
  vol-db-admin:
    driver: local
  vol-db-ods:
    driver: local
  sis-postgres-data:
    driver: local